import streamlit as st
import requests
import json
import datetime

# Set page config
st.set_page_config(
    page_title="родрооро┐ро┤рпН AI роХро╡ро┐родрпИ & роХродрпИ роЬрпЖройро░рпЗроЯрпНроЯро░рпН",
    page_icon="ЁЯУЬ",
    layout="wide"
)

# Custom CSS with Tamil font support
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@400;700&display=swap');
    
    body, .generated-text, textarea, input {
        font-family: 'Noto Sans Tamil', 'Latha', 'Arial Unicode MS', sans-serif !important;
    }
    
    .title {
        color: #2e7d32;
        text-align: center;
        font-size: 2.5rem;
        margin-bottom: 20px;
    }
    
    .generated-text {
        font-size: 18px;
        line-height: 1.8;
        white-space: pre-line;
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        border-left: 5px solid #2e7d32;
        color: #212529 !important;
        margin-top: 20px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .stButton>button {
        background-color: #2e7d32;
        color: white;
        font-size: 16px;
        padding: 8px 20px;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Mistral API configuration
MISTRAL_API_KEY = "kikzWsaFDjKcHiV6gUCkp3jyUx6ojNqt"
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"

def generate_text(title, poem_type, prompt, genre, max_length=300):
    """Generate Tamil text using Mistral API"""
    try:
        if genre == "роХро╡ро┐родрпИ":
            system_prompt = """You are a Tamil poet. Write beautiful Tamil poems with rhyme and rhythm."""
            user_prompt = f"""рокро┐ройрпНро╡ро░рпБроорпН родро▓рпИрокрпНрокро┐ро▓рпН {poem_type} ро╡роХрпИ родрооро┐ро┤рпН роХро╡ро┐родрпИ роОро┤рпБродрпБроХ:
            родро▓рпИрокрпНрокрпБ: {title}
            ро╡ро┐ро│роХрпНроХроорпН: {prompt}
            тАв 4-6 ро╡ро░ро┐роХро│рпН
            тАв роЕро┤роХро╛рой родрооро┐ро┤рпН
            тАв роУроЪрпИ роиропроорпН"""
        else:
            system_prompt = """You are a Tamil storyteller. Write engaging Tamil stories with simple language and interesting endings."""
            user_prompt = f"""рокро┐ройрпНро╡ро░рпБроорпН родро▓рпИрокрпНрокро┐ро▓рпН {poem_type} ро╡роХрпИ родрооро┐ро┤рпН роХродрпИ роОро┤рпБродрпБроХ:
            родро▓рпИрокрпНрокрпБ: {title}
            ро╡ро┐ро│роХрпНроХроорпН: {prompt}
            тАв 5-10 ро╡ро╛роХрпНроХро┐ропроЩрпНроХро│рпН
            тАв роОро│ро┐роп родрооро┐ро┤рпН
            тАв роЪрпБро╡ро╛ро░ро╕рпНропрооро╛рой роорпБроЯро┐ро╡рпБ"""
        
        headers = {
            "Authorization": f"Bearer {MISTRAL_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "open-mistral-7b",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.7,
            "max_tokens": max_length,
            "top_p": 0.9
        }
        
        response = requests.post(MISTRAL_API_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        
        result = response.json()
        return result['choices'][0]['message']['content'].strip()
    except Exception as e:
        st.error(f"рокро┐ро┤рпИ: {str(e)}")
        return None

def create_html_file(title, genre, poem_type, content):
    """Create HTML content with proper styling"""
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ta">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title}</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@400;700&display=swap');
            body {{
                font-family: 'Noto Sans Tamil', sans-serif;
                line-height: 1.8;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                color: #333;
            }}
            h1 {{
                color: #2e7d32;
                text-align: center;
                border-bottom: 2px solid #2e7d32;
                padding-bottom: 10px;
            }}
            .meta {{
                text-align: center;
                font-style: italic;
                margin-bottom: 30px;
                color: #555;
            }}
            .content {{
                white-space: pre-line;
                font-size: 18px;
            }}
        </style>
    </head>
    <body>
        <h1>{title}</h1>
        <div class="meta">
            <p>ро╡роХрпИ: {genre} ({poem_type})</p>
            <p>роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯ родрпЗродро┐: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
        </div>
        <div class="content">
            {content}
        </div>
    </body>
    </html>
    """
    return html_content

def download_file(content, filename):
    """Create download button for the file"""
    st.download_button(
        label="роХрпЛрокрпНрокрпИ рокродро┐ро╡ро┐ро▒роХрпНроХрпБроХ",
        data=content.encode('utf-8'),
        file_name=filename,
        mime="text/html"
    )

# Main app
def main():
    st.markdown("<h1 class='title'>родрооро┐ро┤рпН AI роХро╡ро┐родрпИ & роХродрпИ роЬрпЖройро░рпЗроЯрпНроЯро░рпН</h1>", unsafe_allow_html=True)
    
    with st.sidebar:
        st.header("роЕроорпИрокрпНрокрпБроХро│рпН")
        genre = st.radio("родрпЗро░рпНро╡рпБ роЪрпЖропрпНроХ:", ("роХро╡ро┐родрпИ", "роХродрпИ"), index=0)
        
        if genre == "роХро╡ро┐родрпИ":
            poem_type = st.selectbox(
                "роХро╡ро┐родрпИ ро╡роХрпИ:",
                ("роОрогрпНроЪрпАро░рпН ро╡ро┐ро░рпБродрпНродроорпН", "роХрпБро▒ро│роЯро┐", "ро╡рпЖрогрпНрокро╛", "роЖроЪро┐ро░ро┐ропрокрпНрокро╛", "рооро░рокро▒рпНро▒ роХро╡ро┐родрпИ")
            )
        else:
            poem_type = st.selectbox(
                "роХродрпИ ро╡роХрпИ:",
                ("роирпАродро┐роХрпН роХродрпИ", "роЕро▒ро┐ро╡ро┐ропро▓рпН рокрпБройрпИроХродрпИ", "роХро╛родро▓рпН роХродрпИ", "родро┐роХро┐ро▓рпН роХродрпИ", "ро╡ро░ро▓ро╛ро▒рпНро▒рпБ роХродрпИ")
            )
        
        length = st.slider("роЙро░рпИропро┐ройрпН роирпАро│роорпН:", 100, 500, 250, 50)
        
        st.markdown("---")
        st.markdown("""
        **ро╡ро┤ро┐роорпБро▒рпИроХро│рпН:**  
        1. ро╡роХрпИропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН  
        2. родро▓рпИрокрпНрокрпБ рооро▒рпНро▒рпБроорпН ро╡ро┐ро│роХрпНроХродрпНродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН  
        3. "роЙро░рпБро╡ро╛роХрпНроХрпБ" рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН  
        4. HTML роХрпЛрокрпНрокро╛роХ рокродро┐ро╡ро┐ро▒роХрпНроХро▓ро╛роорпН
        """)
    
    col1, col2 = st.columns(2)
    with col1:
        title = st.text_input("родро▓рпИрокрпНрокрпБ:", placeholder="роО.роХро╛: роХроЯро▓ро┐ройрпН роЕро┤роХрпБ")
    with col2:
        prompt = st.text_input("ро╡ро┐ро│роХрпНроХроорпН:", placeholder="роО.роХро╛: роХроЯро▓ро┐ройрпН роЕро┤роХрпИ рокро▒рпНро▒ро┐роп роХро╡ро┐родрпИ")
    
    if st.button("роЙро░рпБро╡ро╛роХрпНроХрпБ", type="primary"):
        if not title.strip() or not prompt.strip():
            st.warning("родропро╡рпБ роЪрпЖропрпНродрпБ родро▓рпИрокрпНрокрпБ рооро▒рпНро▒рпБроорпН ро╡ро┐ро│роХрпНроХродрпНродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН!")
        else:
            with st.spinner(f"AI роЙроЩрпНроХро│рпН {genre} роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ..."):
                generated_text = generate_text(title, poem_type, prompt, genre, length)
                
                if generated_text:
                    st.markdown("---")
                    st.subheader(f"роЙроЩрпНроХро│рпН {genre}:")
                    st.markdown(f'<div class="generated-text">{generated_text}</div>', unsafe_allow_html=True)
                    
                    # Create HTML file
                    html_content = create_html_file(title, genre, poem_type, generated_text)
                    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"tamil_{genre}_{timestamp}.html"
                    
                    # Download buttons
                    st.markdown("---")
                    st.subheader("рокродро┐ро╡ро┐ро▒роХрпНроХроорпН")
                    download_file(html_content, filename)
                else:
                    st.error("роЙро░рпИ роЙро░рпБро╡ро╛роХрпНроХродрпНродро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯрпБро│рпНро│родрпБ")

if __name__ == "__main__":
    main()